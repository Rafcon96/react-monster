{"version":3,"sources":["component/card/card.js","component/cardList/cardList.js","component/searchBox/searchBox.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsterUsers","map","key","SearchBox","placeholder","handelChange","type","onChange","App","state","monsters","searchField","e","setState","target","value","fetch","then","res","json","users","this","filterMonsters","filter","toLowerCase","includes","toLocaleLowerCase","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iVAIO,SAASA,EAAMC,GACpB,OACI,yBAAKC,UAAY,kBACb,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACvB,4BAAKL,EAAMI,QAAQE,MACnB,2BAAIN,EAAMI,QAAQG,Q,MCHpB,SAASC,EAAUR,GAC1B,OACI,yBAAKC,UAAW,aACVD,EAAMS,aAAaC,KAAI,SAAAN,GAAO,OAClC,kBAACL,EAAD,CAAMY,IAAKP,EAAQC,GAAID,QAAWA,Q,MCLjC,SAASQ,EAAT,GAAiD,IAA5BC,EAA2B,EAA3BA,YAAaC,EAAc,EAAdA,aACrC,OACI,2BACAb,UAAY,SACZc,KAAM,SACNF,YAAcA,EACdG,SAAYF,I,UC2BLG,E,2MA/BbC,MAAQ,CACNC,SAAS,GACTC,YAAa,I,EASjBN,aAAc,SAACO,GACb,EAAKC,SAAS,CAACF,YAAaC,EAAEE,OAAOC,S,mFAPnB,IAAD,OACjBC,MAAM,8CACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAK,OAAI,EAAKP,SAAS,CAAEH,SAASU,S,+BAShC,IAAD,EACwBC,KAAKZ,MAA7BC,EADA,EACAA,SAASC,EADT,EACSA,YACVW,EAAiBZ,EAASa,QAAO,SAAA5B,GAAO,OAC5CA,EAAQE,KAAK2B,cAAcC,SAASd,EAAYe,wBAClD,OACE,yBAAKlC,UAAU,OACb,+CACD,kBAACW,EAAD,CAAWE,aAAcgB,KAAKhB,aAAcD,YAAY,qBACxD,kBAACL,EAAD,CAAUC,aAAcsB,S,GA1BXK,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,kB","file":"static/js/main.c91f31da.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './card.css'\r\n\r\nexport function Card (props) {\r\n  return(\r\n      <div className = 'card-container'>\r\n          <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\r\n         <h2>{props.monster.name}</h2> \r\n         <p>{props.monster.email}</p>\r\n      </div>\r\n  );\r\n}","import React from 'react';\r\nimport {Card} from '../card/card'\r\n\r\nimport  './cardList.css'\r\n\r\n\r\nexport function CardList (props) {\r\nreturn(\r\n    <div className ='card-list'>\r\n         {props.monsterUsers.map(monster => \r\n      <Card key={monster.id} monster = {monster}  / >\r\n    )}\r\n    </div>\r\n)\r\n}  \r\n\r\n ","import React from 'react';\r\n\r\nimport './searchBox.css'\r\n\r\n\r\nexport function SearchBox ({placeholder, handelChange}){\r\n    return (\r\n        <input \r\n        className = 'search'\r\n        type ='search'\r\n        placeholder= {placeholder}\r\n        onChange = {handelChange}\r\n        />\r\n    );\r\n}","import React, {Component} from 'react';\nimport {CardList} from './component/cardList/cardList';\nimport {SearchBox} from './component/searchBox/searchBox';\nimport './App.css';\n\n\nclass App extends Component {\n  state = {\n    monsters:[],\n    searchField: ''\n  }\n\ncomponentDidMount(){\n  fetch('https://jsonplaceholder.typicode.com/users')\n  .then(res => res.json())\n  .then(users => this.setState({ monsters:users}));\n}\n\nhandelChange =(e) => {\n  this.setState({searchField: e.target.value})\n}\n  \n\n\nrender() {\n  const {monsters,searchField} = this.state;\n  const filterMonsters = monsters.filter(monster => \n    monster.name.toLowerCase().includes(searchField.toLocaleLowerCase()))\n  return (\n    <div className=\"App\"  >\n      <h1>Monster Rolodex</h1>\n     <SearchBox handelChange={this.handelChange} placeholder='search monsters:' />\n     <CardList monsterUsers={filterMonsters} />\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}